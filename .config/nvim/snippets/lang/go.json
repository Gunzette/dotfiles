{
	"pass error downstream": {
		"prefix": "ifErr",
		"body": "if err != nil {\n\treturn ${1:\"\"}, err\n}",
		"description": "Snippet to pass through errors"
	},
	"log error": {
		"prefix": "logErr",
		"body": "if err != nil {\n\tlog.Fatal(err)\n}$0",
		"description": "Snippet to log errors"
	},
	"enum block": {
		"prefix": "enum",
		"body": "type ${1:TYPE} ${2:int}\n\nconst = (\n\t${4:Option} $1 = ${3:iota}\n\t$0\n)",
		"description": "Simple enum type"
	},
	"switch case block": {
		"prefix": "switch",
		"body": "switch ${1:VALUE} {\ncase ${2:CASE}:\n\t$0\ndefault:\n\t$3\n}",
		"description": "Simple switch block with one case and one default"
	},
	"if block": {
		"prefix": "if",
		"body": "if ${1:condition} {\n\t$0\n}",
		"description": "Simple if condition"
	},
	"else block": {
		"prefix": "el",
		"body": "else {\n\t$0\n}",
		"description": "Simple else condition"
	},
	"if else block": {
		"prefix": "ifel",
		"body": "if ${1:condition} {\n\t$2\n} else {\n\t$0\n}",
		"description": "Simple if condition with else block"
	},
	"for i statement": {
		"prefix": "fori",
		"body": "for ${1:i} := ${2:0}; $1 < ${3:bound}; $1${4:++} {\n\t$0\n}",
		"description": "Simple counting for loop"
	},
	"for range": {
		"prefix": "forr",
		"body": "for ${1:i}, ${2:elem} := range ${3:iterable} {\n\t$0\n}",
		"description": "Simple range for loop"
	}
}
